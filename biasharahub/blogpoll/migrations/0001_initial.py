# Generated by Django 2.2.12 on 2021-01-30 15:25

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import hitcount.models
import taggit.managers
import utility.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('categories', '0003_auto_20210126_1344'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PostPoll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('publish', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('meta_keywords', models.CharField(blank=True, help_text='Separate keywords by comma.', max_length=255, verbose_name='Keywords')),
                ('meta_description', utility.models.TruncatingCharField(blank=True, max_length=255, verbose_name='Description')),
                ('meta_author', models.CharField(blank=True, max_length=255, verbose_name='Author')),
                ('meta_copyright', models.CharField(blank=True, max_length=255, verbose_name='Copyright')),
                ('image', models.ImageField(blank=True, null=True, upload_to='PostPoll/images')),
                ('active', models.BooleanField(default=True)),
                ('category', models.ManyToManyField(blank=True, related_name='category_poll', to='categories.Category')),
            ],
            options={
                'verbose_name': 'post poll',
                'verbose_name_plural': 'post polls',
            },
            bases=(models.Model, hitcount.models.HitCountMixin),
        ),
        migrations.CreateModel(
            name='SameTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='blogpoll.PostPoll')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogpoll_sametags_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='postpoll',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='blogpoll.SameTags', to='taggit.Tag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='postpoll',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='post_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PostChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('publish', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='Postchoice/images')),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blogpoll.PostPoll')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='choice_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['publish', 'name'],
                'abstract': False,
            },
        ),
    ]
